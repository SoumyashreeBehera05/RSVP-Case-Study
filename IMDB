USE imdb;

/* Now that you have imported the data sets, let’s explore some of the tables. 
 To begin with, it is beneficial to know the shape of the tables and whether any column has null values.
 Further in this segment, you will take a look at 'movies' and 'genre' tables.*/



-- Segment 1:




-- Q1. Find the total number of rows in each table of the schema?
-- Type your code below:
SELECT
   table_name,
   table_rows 
FROM
   INFORMATION_SCHEMA.TABLES 
WHERE
   TABLE_SCHEMA = 'imdb';

/*
Answer:
TABLE_NAME	TABLE_ROWS
director_mapping	3867
genre	14662
movie	7594
names	29790
ratings	7927
role_mapping	15179

-- 3867 rows in table director_mapping
-- 14662 rows in table genre
-- 7997 rows in table movie
-- 25735 rows in table names
-- 7997 rows in table ratings
-- 15615 rows in table role_mapping

*/



-- Q2. Which columns in the movie table have null values?
-- Type your code below:
SELECT SUM(CASE
             WHEN id IS NULL THEN 1
             ELSE 0
           END) AS NULL_ID,
       SUM(CASE
             WHEN title IS NULL THEN 1
             ELSE 0
           END) AS NULL_title,
       SUM(CASE
             WHEN year IS NULL THEN 1
             ELSE 0
           END) AS NULL_year,
       SUM(CASE
             WHEN date_published IS NULL THEN 1
             ELSE 0
           END) AS NULL_date_published,
       SUM(CASE
             WHEN duration IS NULL THEN 1
             ELSE 0
           END) AS NULL_duration,
       SUM(CASE
             WHEN country IS NULL THEN 1
             ELSE 0
           END) AS NULL_country,
       SUM(CASE
             WHEN worlwide_gross_income IS NULL THEN 1
             ELSE 0
           END) AS NULL_worlwide_gross_income,
       SUM(CASE
             WHEN languages IS NULL THEN 1
             ELSE 0
           END) AS NULL_languages,
       SUM(CASE
             WHEN production_company IS NULL THEN 1
             ELSE 0
           END) AS NULL_production_company
FROM   movie; 

/* Answer:
 country, worlwide_gross_income,languages,production_company columns in the movie table have NULL values.
*/




-- Now as you can see four columns of the movie table has null values. Let's look at the at the movies released each year. 
-- Q3. Find the total number of movies released each year? How does the trend look month wise? (Output expected)

/* Output format for the first part:

+---------------+-------------------+
| Year			|	number_of_movies|
+-------------------+----------------
|	2017		|	2134			|
|	2018		|		.			|
|	2019		|		.			|
+---------------+-------------------+


Output format for the second part of the question:
+---------------+-------------------+
|	month_num	|	number_of_movies|
+---------------+----------------
|	1			|	 134			|
|	2			|	 231			|
|	.			|		.			|
+---------------+-------------------+ */
-- Type your code below:

-- For the first part 
SELECT year     AS Year,
       COUNT(*) AS number_of_movies
FROM   movie
GROUP  BY year
ORDER  BY year; 

/* Answer:
Year	number_of_movies
2017	3052
2018	2944
2019	2001
*/

-- For the second part
SELECT Month(date_published) AS month_num,
       COUNT(*)              AS number_of_movies
FROM   movie
GROUP  BY month_num
ORDER  BY month_num; 

/*
Answer:
month_num	number_of_movies
1	804
2	640
3	824
4	680
5	625
6	580
7	493
8	678
9	809
10	801
11	625
12	438
*/

/*The highest number of movies is produced in the month of March.
So, now that you have understood the month-wise trend of movies, let’s take a look at the other details in the movies table. 
We know USA and India produces huge number of movies each year. Lets find the number of movies produced by USA or India for the last year.*/
  
-- Q4. How many movies were produced in the USA or India in the year 2019??
-- Type your code below:
SELECT COUNT(*) AS number_of_movies
FROM   movie
WHERE  (country LIKE "%usa%"
          OR country LIKE "%india%")
       AND year = "2019"; 

/*
Answer:
number_of_movies
1059
-- 1059 movies were produced in the USA or India in the year 2019
*/
/* USA and India produced more than a thousand movies(you know the exact number!) in the year 2019.
Exploring table Genre would be fun!! 
Let’s find out the different genres in the dataset.*/

-- Q5. Find the unique list of the genres present in the data set?
-- Type your code below:

SELECT DISTINCT genre
FROM   genre; 

/*
Answer:
genre
Drama
Fantasy
Thriller
Comedy
Horror
Family
Romance
Adventure
Action
Sci-Fi
Crime
Mystery
Others
There are 13 genre present.
*/


/* So, RSVP Movies plans to make a movie of one of these genres.
Now, wouldn’t you want to know which genre had the highest number of movies produced in the last year?
Combining both the movie and genres table can give more interesting insights. */

-- Q6.Which genre had the highest number of movies produced overall?
-- Type your code below:

SELECT     genre,
           COUNT(*) AS number_of_movies
FROM       movie
INNER JOIN genre
WHERE      movie.id = genre.movie_id
GROUP BY   genre
ORDER BY   number_of_movies DESC LIMIT 1;

/*
Answer:
genre	number_of_movies
Drama	4285
-- 4285 movies belongs to Drama genre
*/

/* So, based on the insight that you just drew, RSVP Movies should focus on the ‘Drama’ genre. 
But wait, it is too early to decide. A movie can belong to two or more genres. 
So, let’s find out the count of movies that belong to only one genre.*/

-- Q7. How many movies belong to only one genre?
-- Type your code below:
SELECT COUNT(movie_id)
FROM   (SELECT movie_id,
               COUNT(genre) AS genre_count
        FROM   genre
        GROUP  BY ( movie_id )) AS g
WHERE  genre_count = 1; 
    
/*
Answer:
COUNT(movie_id)
3289

3289 movies have 1 genre
*/

/* There are more than three thousand movies which has only one genre associated with them.
So, this figure appears significant. 
Now, let's find out the possible duration of RSVP Movies’ next project.*/

-- Q8.What is the average duration of movies in each genre? 
-- (Note: The same movie can belong to multiple genres.)


/* Output format:

+---------------+-------------------+
| genre			|	avg_duration	|
+-------------------+----------------
|	thriller	|		105			|
|	.			|		.			|
|	.			|		.			|
+---------------+-------------------+ */
-- Type your code below:

SELECT     genre,
           ROUND(Avg(duration), 2) AS avg_duration
FROM       movie
INNER JOIN genre
WHERE      movie.id = genre.movie_id
GROUP BY   genre
ORDER BY   avg_duration;

/*
Answer:
genre	avg_duration
Horror	92.72
Sci-Fi	97.94
Others	100.16
Family	100.97
Thriller	101.58
Mystery	101.80
Adventure	101.87
Comedy	102.62
Fantasy	105.14
Drama	106.77
Crime	107.05
Romance	109.53
Action	112.88
*/
/* Now you know, movies of genre 'Drama' (produced highest in number in 2019) has the average duration of 106.77 mins.
Lets find where the movies of genre 'thriller' on the basis of number of movies.*/

-- Q9.What is the rank of the ‘thriller’ genre of movies among all the genres in terms of number of movies produced? 
-- (Hint: Use the Rank function)


/* Output format:
+---------------+-------------------+---------------------+
| genre			|		movie_count	|		genre_rank    |	
+---------------+-------------------+---------------------+
|drama			|	2312			|			2		  |
+---------------+-------------------+---------------------+*/
-- Type your code below:
WITH genre_rank
     AS (SELECT genre,
                COUNT(movie_id)                     AS movie_count,
                Rank()
                  OVER (
                    ORDER BY COUNT(movie_id) DESC ) genre_rank
         FROM   genre
         GROUP  BY genre)
SELECT *
FROM   genre_rank
WHERE  genre = 'Thriller'; 

/*
Answer: Thriller genre is in RANK 3
genre	movie_count	genre_rank
Thriller	1484	3
*/


/*Thriller movies is in top 3 among all genres in terms of number of movies
 In the previous segment, you analysed the movies and genres tables. 
 In this segment, you will analyse the ratings table as well.
To start with lets get the min and max values of different columns in the table*/


-- Segment 2:




-- Q10.  Find the minimum and maximum values in  each column of the ratings table except the movie_id column?
/* Output format:
+---------------+-------------------+---------------------+----------------------+-----------------+-----------------+
| min_avg_rating|	max_avg_rating	|	min_total_votes   |	max_total_votes 	 |min_median_rating|min_median_rating|
+---------------+-------------------+---------------------+----------------------+-----------------+-----------------+
|		0		|			5		|	       177		  |	   2000	    		 |		0	       |	8			 |
+---------------+-------------------+---------------------+----------------------+-----------------+-----------------+*/
-- Type your code below:
SELECT MIN(avg_rating)    AS min_avg_rating,
       MAX(avg_rating)    AS max_avg_rating,
       MIN(total_votes)   AS min_total_votes,
       MAX(total_votes)   AS max_total_votes,
       MIN(median_rating) AS min_median_rating,
       MAX(median_rating) AS max_median_rating
FROM   ratings; 

/*Answer:
min_avg_rating	max_avg_rating	min_total_votes	max_total_votes	min_median_rating	max_median_rating
1.0	10.0	100	725138	1	10
*/
/* So, the minimum and maximum values in each column of the ratings table are in the expected range. 
This implies there are no outliers in the table. 
Now, let’s find out the top 10 movies based on average rating.*/

-- Q11. Which are the top 10 movies based on average rating?
/* Output format:
+---------------+-------------------+---------------------+
| title			|		avg_rating	|		movie_rank    |
+---------------+-------------------+---------------------+
| Fan			|		9.6			|			5	  	  |
|	.			|		.			|			.		  |
|	.			|		.			|			.		  |
|	.			|		.			|			.		  |
+---------------+-------------------+---------------------+*/
-- Type your code below:
-- It's ok if RANK() or DENSE_RANK() is used too

SELECT
   title,
   avg_rating,
   RANK() OVER (
ORDER BY
   avg_rating DESC ) movie_rank 
FROM
   movie 
   INNER JOIN
      ratings 
WHERE
   movie.id = ratings.movie_id LIMIT 10;

/*
Answer:
title	avg_rating	movie_rank
Kirket	10.0	1
Love in Kilnerry	10.0	1
Gini Helida Kathe	9.8	3
Runam	9.7	4
Fan	9.6	5
Android Kunjappan Version 5.25	9.6	5
Yeh Suhaagraat Impossible	9.5	7
Safe	9.5	7
The Brighton Miracle	9.5	7
Shibu	9.4	10
*/
/* Do you find you favourite movie FAN in the top 10 movies with an average rating of 9.6? If not, please check your code again!!
So, now that you know the top 10 movies, do you think character actors and filler actors can be from these movies?
Summarising the ratings table based on the movie counts by median rating can give an excellent insight.*/

-- Q12. Summarise the ratings table based on the movie counts by median ratings.
/* Output format:

+---------------+-------------------+
| median_rating	|	movie_count		|
+-------------------+----------------
|	1			|		105			|
|	.			|		.			|
|	.			|		.			|
+---------------+-------------------+ */
-- Type your code below:
-- Order by is good to have

SELECT median_rating, 
		COUNT(movie_id) AS movie_count
FROM ratings
GROUP BY median_rating
ORDER BY median_rating;

/*
Answer:
median_rating	movie_count
1	94
2	119
3	283
4	479
5	985
6	1975
7	2257
8	1030
9	429
10	346
Most movies are of median rating 7 and least movies are of median rating 1.
*/

/* Movies with a median rating of 7 is highest in number. 
Now, let's find out the production house with which RSVP Movies can partner for its next project.*/

-- Q13. Which production house has produced the most number of hit movies (average rating > 8)??
/* Output format:
+------------------+-------------------+---------------------+
|production_company|movie_count	       |	prod_company_rank|
+------------------+-------------------+---------------------+
| The Archers	   |		1		   |			1	  	 |
+------------------+-------------------+---------------------+*/
-- Type your code below:

SELECT     production_company,
           COUNT(id)                              AS movie_count,
           Rank() OVER (ORDER BY COUNT(id) DESC )    prod_company_rank
FROM       movie
INNER JOIN ratings
WHERE      movie.id=ratings.movie_id
AND        avg_rating>8
AND        production_company IS NOT NULL
GROUP BY   production_company;

/*Answer:
production_company	movie_count	prod_company_rank
Dream Warrior Pictures	3	1
National Theatre Live	3	1
Lietuvos Kinostudija	2	3
Swadharm Entertainment	2	3
Panorama Studios	2	3
Marvel Studios	2	3
Central Base Productions	2	3
Painted Creek Productions	2	3
National Theatre	2	3
Colour Yellow Productions	2	3
The Archers	1	11
Blaze Film Enterprises	1	11
Bradeway Pictures	1	11
Bert Marcus Productions	1	11
A Studios	1	11
Ronk Film	1	11
Benaras Mediaworks	1	11
Bioscope Film Framers	1	11
Bestwin Production	1	11
Studio Green	1	11
AKS Film Studio	1	11
Kaargo Cinemas	1	11
Animonsta Studios	1	11
O3 Turkey Medya	1	11
StarVision	1	11
Synergy Films	1	11
PVP Cinema	1	11
Plan J Studios	1	11
20 Steps Productions	1	11
Prime Zero Productions	1	11
Shreya Films International	1	11
SLN Cinemas	1	11
Epiphany Entertainments	1	11
3 Ng Film	1	11
Eastpool Films	1	11
A square productions	1	11
Oak Entertainments	1	11
Doha Film Institute	1	11
Fenrir Films	1	11
Fábrica de Cine	1	11
Chernin Entertainment	1	11
Cross Creek Pictures	1	11
Loaded Dice Films	1	11
WM Films	1	11
Walt Disney Pictures	1	11
Excel Entertainment	1	11
Ancine	1	11
Twentieth Century Fox	1	11
Ave Fenix Pictures	1	11
Runaway Productions	1	11
Aletheia Films	1	11
70 MM Entertainments	1	11
Moho Film	1	11
BR Productions and Riding High Pictures	1	11
Cana Vista Films	1	11
Gurbani Media	1	11
Sony Pictures Entertainment (SPE)	1	11
InnoVate Productions	1	11
Saanvi Pictures	1	11
The SPA Studios	1	11
Rotten Productions	1	11
Film Village	1	11
Arka Mediaworks	1	11
Atresmedia Cine	1	11
Goopy Bagha Productions Limited	1	11
Maxmedia	1	11
1234 Cine Creations	1	11
Silent Hills Studio	1	11
Blueprint Pictures	1	11
Archangel Studios	1	11
HI Film Productions	1	11
Tin Drum Beats	1	11
Frío Frío	1	11
Warnuts Entertainment	1	11
Potential Studios	1	11
Adrama	1	11
Dark Steel Entertainment	1	11
Allfilm	1	11
Nokkhottro Cholochitra	1	11
BOB Film Sweden AB	1	11
Smash Entertainment!	1	11
EFilm	1	11
Urvashi Theaters	1	11
Angel Capital Film Group	1	11
Grass Root Film Company	1	11
Art Movies	1	11
Lost Legends	1	11
Ra.Mo.	1	11
Avocado Media	1	11
Tigmanshu Dhulia Films	1	11
Think Music	1	11
Anwar Rasheed Entertainment	1	11
Dwarakish Chitra	1	11
Anto Joseph Film Company	1	11
Dijital Sanatlar Production	1	11
Missart produkcija	1	11
Jayanna Combines	1	11
Jar Pictures	1	11
British Muslim TV	1	11
Crossing Bridges Films	1	11
BrightKnight Entertainment	1	11
Mirror Images LTD.	1	11
Mango Pickle Entertainment	1	11
Detailfilm	1	11
Archway Pictures	1	11
Vehli Janta Films	1	11
Grooters Productions	1	11
Fulwell 73	1	11
Participant	1	11
Madras Enterprises	1	11
Alchemy Vision Workz	1	11
Axess Film Factory	1	11
PRK Productions	1	11
Dashami Studioz	1	11
Fablemaze	1	11
StarFab Production	1	11
RGK Cinema	1	11
Shreyasree Movies	1	11
BRON Studios	1	11
Bhadrakali Pictures	1	11
The Icelandic Filmcompany	1	11
The Church of Almighty God Film Center	1	11
Maha Sithralu	1	11
Mythri Movie Makers	1	11
Orange Médias	1	11
Mumbai Film Company	1	11
Swapna Cinema	1	11
Vivid Films	1	11
HRX Films	1	11
Wonder Head	1	11
Sixteen by Sixty-Four Productions	1	11
Akshar Communications	1	11
Moviee Mill	1	11
Happy Hours Entertainments	1	11
M-Films	1	11
Cineddiction Films	1	11
Heyday Films	1	11
Diamond Works	1	11
Shree Raajalakshmi Films	1	11
Dream Tree Film Productions	1	11
Cine Sarasavi Productions	1	11
Acropolis Entertainment	1	11
RedhanThe Cinema People	1	11
Hombale Films	1	11
Swonderful Pictures	1	11
COMETE Films	1	11
Cinepro Lanka International	1	11
Williams 4 Productions	1	11
Touch Wood Multimedia Creations	1	11
Rocket Beans Entertainment	1	11
Hepifilms	1	11
SRaj Productions	1	11
Kharisma Starvision Plus PT	1	11
MD productions	1	11
Ataraxia Entertainment	1	11
NBW Films	1	11
Kannamthanam Films	1	11
Brainbox Studios	1	11
Matchbox Pictures	1	11
Reliance Entertainment	1	11
Neelam Productions	1	11
Jyot & Aagnya Anusaare Productions	1	11
Clown Town Productions	1	11
Special Treats Production Company	1	11
Mooz Films	1	11
Bulb Chamka	1	11
GreenTouch Entertainment	1	11
Crystal Paark Cinemas	1	11
Kangaroo Broadcasting	1	11
Swami Samartha Creations	1	11
DreamReality Movies	1	11
Fahadh Faasil and Friends	1	11
Narrator	1	11
Kineo Filmproduktion	1	11
Appu Pathu Pappu Production House	1	11
Rishab Shetty Films	1	11
Namah Pictures	1	11
Annai Tamil Cinemas	1	11
Viacom18 Motion Pictures	1	11
MNC Pictures	1	11
Clyde Vision Films	1	11
Adenium Productions	1	11
Trafalgar Releasing	1	11
Lovely World Entertainment	1	11
Hayagriva Movie Adishtana	1	11
OPM Cinemas	1	11
Sithara Entertainments	1	11
French Quarter Film	1	11
Mumba Devi Motion Pictures	1	11
Fox STAR Studios	1	11
Aries Telecasting	1	11
Abis Studio	1	11
Rapi Films	1	11
Ay Yapim	1	11
Aatpaat Production	1	11
Channambika Films	1	11
Cinenic Film	1	11
The United Team of Art	1	11
Grahalakshmi Productions	1	11
Mahesh Manjrekar Movies	1	11
Manikya Productions	1	11
Bombay Walla Films	1	11
Viva Inen Productions	1	11
Banana Film DOOEL	1	11
Toei Animation	1	11
Golden Horse Cinema	1	11
V. Creations	1	11
Moonshot Entertainments	1	11
Humble Motion Pictures	1	11
Coconut Motion Pictures	1	11
Bayview Projects	1	11
Piecewing Productions	1	11
Manyam Productions	1	11
Suresh Productions	1	11
Benzy Productions	1	11
RMCC Productions	1	11

-- 'Dream Warrior Pictures' & "National Theatre Live" production house have 3 hit movies


-- It's ok if RANK() or DENSE_RANK() is used too
-- Answer can be Dream Warrior Pictures or National Theatre Live or both

-- Q14. How many movies released in each genre during March 2017 in the USA had more than 1,000 votes?
/* Output format:

+---------------+-------------------+
| genre			|	movie_count		|
+-------------------+----------------
|	thriller	|		105			|
|	.			|		.			|
|	.			|		.			|
+---------------+-------------------+ */
-- Type your code below:

SELECT genre,
       COUNT(*) AS movie_count
FROM   movie
       INNER JOIN ratings
               ON movie.id = ratings.movie_id
       INNER JOIN genre
               ON movie.id = genre.movie_id
WHERE  country LIKE "%usa%"
       AND year = 2017
       AND MONTH(date_published) = 3
       AND total_votes > 1000
GROUP  BY genre
ORDER  BY movie_count DESC; 

/*Answer:
Drama	24
Comedy	9
Action	8
Thriller	8
Sci-Fi	7
Crime	6
Horror	6
Mystery	4
Romance	4
Fantasy	3
Adventure	3
Family	1

Highest movies (24 movies) released for 'Drama' genre in the year 2017
*/

-- Lets try to analyse with a unique problem statement.
-- Q15. Find movies of each genre that start with the word ‘The’ and which have an average rating > 8?
/* Output format:
+---------------+-------------------+---------------------+
| title			|		avg_rating	|		genre	      |
+---------------+-------------------+---------------------+
| Theeran		|		8.3			|		Thriller	  |
|	.			|		.			|			.		  |
|	.			|		.			|			.		  |
|	.			|		.			|			.		  |
+---------------+-------------------+---------------------+*/
-- Type your code below:
SELECT title,
       avg_rating,
       genre
FROM   movie
       INNER JOIN ratings
               ON movie.id = ratings.movie_id
       INNER JOIN genre
               ON movie.id = genre.movie_id
WHERE  title LIKE "the%"
       AND avg_rating > 8
ORDER  BY genre; 

/*
Answer::
title	avg_rating	genre
Theeran Adhigaaram Ondru	8.3	Action
The Irishman	8.7	Crime
Theeran Adhigaaram Ondru	8.3	Crime
The Gambinos	8.4	Crime
The Blue Elephant 2	8.8	Drama
The Brighton Miracle	9.5	Drama
The Irishman	8.7	Drama
The Colour of Darkness	9.1	Drama
The Mystery of Godliness: The Sequel	8.5	Drama
The Gambinos	8.4	Drama
The King and I	8.2	Drama
The Blue Elephant 2	8.8	Horror
The Blue Elephant 2	8.8	Mystery
The King and I	8.2	Romance
Theeran Adhigaaram Ondru	8.3	Thriller
*/


-- You should also try your hand at median rating and check whether the ‘median rating’ column gives any significant insights.
-- Q16. Of the movies released between 1 April 2018 and 1 April 2019, how many were given a median rating of 8?
-- Type your code below:

SELECT title,
       median_rating
FROM   movie
       INNER JOIN ratings
               ON movie.id = ratings.movie_id
WHERE  median_rating = 8
       AND ( date_published BETWEEN '2018-04-01' AND '2019-04-01' )
ORDER  BY median_rating; 

/*Answer:
title	median_rating
Le roi de coeur	8
Ankur	8
The Evil Dead	8
Pestonjee	8
Aashirwad	8
Kaminnyy khrest	8
Ek Hasina Thi	8
.
.
.
.
*/
-- Once again, try to solve the problem given below.
-- Q17. Do German movies get more votes than Italian movies? 
-- Hint: Here you have to find the total number of votes for both German and Italian movies.
-- Type your code below:
SELECT SUM(total_votes),
       country_name
FROM   (SELECT country,
               total_votes,
               CASE
                 WHEN country LIKE '%Germany%' THEN 'Germany'
                 WHEN country LIKE '%Italy%' THEN 'Italy'
               END AS country_name
        FROM   ratings r
               INNER JOIN movie m
                       ON m.id = r.movie_id
        WHERE  country LIKE '%Germany%'
                OR country LIKE '%Italy%') s
GROUP  BY country_name;

/*Answer::
SUM(total_votes)	country_name
2026223	Germany
613535	Italy
-- Yes German movies get more votes than Italian movies.
*/

-- Answer is Yes

/* Now that you have analysed the movies, genres and ratings tables, let us now analyse another table, the names table. 
Let’s begin by searching for null values in the tables.*/



-- Segment 3:



-- Q18. Which columns in the names table have null values?
/*Hint: You can find null values for individual columns or follow below output format
+---------------+-------------------+---------------------+----------------------+
| name_nulls	|	height_nulls	|date_of_birth_nulls  |known_for_movies_nulls|
+---------------+-------------------+---------------------+----------------------+
|		0		|			123		|	       1234		  |	   12345	    	 |
+---------------+-------------------+---------------------+----------------------+*/
-- Type your code below:*/

SELECT SUM(CASE
             WHEN NAME IS NULL THEN 1
             ELSE 0
           END) AS name_nulls,
       SUM(CASE
             WHEN height IS NULL THEN 1
             ELSE 0
           END) AS height_nulls,
       SUM(CASE
             WHEN date_of_birth IS NULL THEN 1
             ELSE 0
           END) AS date_of_birth_nulls,
       SUM(CASE
             WHEN known_for_movies IS NULL THEN 1
             ELSE 0
           END) AS known_for_movies_nulls
FROM   names; 
/*
name_nulls	height_nulls	date_of_birth_nulls	known_for_movies_nulls
0	17335	13431	15226

There are no Null value in the column 'name'.
*/


/* There are no Null value in the column 'name'.
The director is the most important person in a movie crew. 
Let’s find out the top three directors in the top three genres who can be hired by RSVP Movies.*/

-- Q19. Who are the top three directors in the top three genres whose movies have an average rating > 8?
-- (Hint: The top three genres would have the most number of movies with an average rating > 8.)
/* Output format:

+---------------+-------------------+
| director_name	|	movie_count		|
+---------------+-------------------|
|James Mangold	|		4			|
|	.			|		.			|
|	.			|		.			|
+---------------+-------------------+ */
-- Type your code below:

WITH top_genre AS
(
           SELECT     genre,
                      COUNT(genre.movie_id) AS total_movie
           FROM       genre
           INNER JOIN ratings
           ON         genre.movie_id=ratings.movie_id
           WHERE      avg_rating>8
           GROUP BY   genre
           ORDER BY   total_movie DESC limit 3 ), 
top_director AS
(
           SELECT     n.NAME                                             AS director_name,
                      COUNT(g.movie_id)                                  AS movie_count,
                      Row_number() OVER(ORDER BY COUNT(g.movie_id) DESC) AS director_row_rank
           FROM       names                                              AS n
           INNER JOIN director_mapping                                   AS dm
           ON         n.id = dm.name_id
           INNER JOIN genre AS g
           ON         dm.movie_id = g.movie_id
           INNER JOIN ratings AS r
           ON         r.movie_id = g.movie_id,
                      top_genre
           WHERE      g.genre IN (top_genre.genre)
           AND        avg_rating>8
           GROUP BY   director_name
           ORDER BY   movie_count DESC )
SELECT *
FROM   top_director
WHERE  director_row_rank <= 3 LIMIT 3;

/* 
Answer:
director_name	movie_count	director_row_rank
James Mangold	4	1
Soubin Shahir	3	2
Joe Russo	3	3

James Mangold can be hired as the director for RSVP's next project. Do you remeber his movies, 'Logan' and 'The Wolverine'. 
Now, let’s find out the top two actors.*/

-- Q20. Who are the top two actors whose movies have a median rating >= 8?
/* Output format:

+---------------+-------------------+
| actor_name	|	movie_count		|
+-------------------+----------------
|Christain Bale	|		10			|
|	.			|		.			|
+---------------+-------------------+ */
-- Type your code below:

SELECT n.name             AS actor_name,
       COUNT(rm.movie_id) AS movie_count
FROM   ratings AS r
       INNER JOIN role_mapping AS rm
               ON r.movie_id = rm.movie_id
       INNER JOIN names AS n
               ON rm.name_id = n.id
WHERE  r.median_rating >= 8
       AND rm.category = "actor"
GROUP  BY actor_name
ORDER  BY movie_count DESC
LIMIT  2; 
/*
Answer:
actor_name	movie_count
Mammootty	8
Mohanlal	5

'Mammootty' and 'Mohanlal' are the top 2 actors.
*/

/* Have you find your favourite actor 'Mohanlal' in the list. If no, please check your code again. 
RSVP Movies plans to partner with other global production houses. 
Let’s find out the top three production houses in the world.*/

-- Q21. Which are the top three production houses based on the number of votes received by their movies?
/* Output format:
+------------------+--------------------+---------------------+
|production_company|vote_count			|		prod_comp_rank|
+------------------+--------------------+---------------------+
| The Archers		|		830			|		1	  		  |
|	.				|		.			|			.		  |
|	.				|		.			|			.		  |
+-------------------+-------------------+---------------------+*/
-- Type your code below:

SELECT     production_company,
           SUM(total_votes)                            AS vote_count,
           RANK() OVER(ORDER BY SUM(total_votes) DESC) AS prod_comp_rank
FROM       movie
INNER JOIN ratings
ON         movie.id=ratings.movie_id
WHERE      production_company IS NOT NULL
GROUP BY   production_company LIMIT 3;

/*Answer:
production_company	vote_count	prod_comp_rank
Marvel Studios	2656967	1
Twentieth Century Fox	2411163	2
Warner Bros.	2396057	3
 Marvel Studios, Twentieth Century Fox, Warner Bros. are the top three production houses based on the number of votes.
*/
/*Yes Marvel Studios rules the movie world.
So, these are the top three production houses based on the number of votes received by the movies they have produced.

Since RSVP Movies is based out of Mumbai, India also wants to woo its local audience. 
RSVP Movies also wants to hire a few Indian actors for its upcoming project to give a regional feel. 
Let’s find who these actors could be.*/

-- Q22. Rank actors with movies released in India based on their average ratings. Which actor is at the top of the list?
-- Note: The actor should have acted in at least five Indian movies. 
-- (Hint: You should use the weighted average based on votes. If the ratings clash, then the total number of votes should act as the tie breaker.)

/* Output format:
+---------------+-------------------+---------------------+----------------------+-----------------+
| actor_name	|	total_votes		|	movie_count		  |	actor_avg_rating 	 |actor_rank	   |
+---------------+-------------------+---------------------+----------------------+-----------------+
|	Yogi Babu	|			3455	|	       11		  |	   8.42	    		 |		1	       |
|		.		|			.		|	       .		  |	   .	    		 |		.	       |
|		.		|			.		|	       .		  |	   .	    		 |		.	       |
|		.		|			.		|	       .		  |	   .	    		 |		.	       |
+---------------+-------------------+---------------------+----------------------+-----------------+*/
-- Type your code below:

SELECT   *,
         RANK() OVER(ORDER BY actor_avg_rating DESC) AS actor_rank
FROM     (
                    SELECT     n.NAME                                                      AS actor_name,
                               SUM(r.total_votes)                                          AS total_votes,
                               COUNT(rm.movie_id)                                          AS movie_count,
                               ROUND(SUM(r.avg_rating*r.total_votes)/SUM(r.total_votes),2) AS actor_avg_rating
                    FROM       movie                                                       AS m
                    INNER JOIN ratings                                                     AS r
                    ON         m.id=r.movie_id
                    INNER JOIN role_mapping AS rm
                    ON         m.id=rm.movie_id
                    INNER JOIN names AS n
                    ON         rm.name_id=n.id
                    WHERE      m.country LIKE "%India%"
                    AND        rm.category='actor'
                    GROUP BY   NAME
                    HAVING     COUNT(m.id)>=5) AS s limit 1;
/*
Answer:
actor_name	total_votes	movie_count	actor_avg_rating	actor_rank
Vijay Sethupathi	23114	5	8.42	1
 "Vijay Sethupathi" actor is at the top of the list
*/

-- Top actor is Vijay Sethupathi

-- Q23.Find out the top five actresses in Hindi movies released in India based on their average ratings? 
-- Note: The actresses should have acted in at least three Indian movies. 
-- (Hint: You should use the weighted average based on votes. If the ratings clash, then the total number of votes should act as the tie breaker.)
/* Output format:
+---------------+-------------------+---------------------+----------------------+-----------------+
| actress_name	|	total_votes		|	movie_count		  |	actress_avg_rating 	 |actress_rank	   |
+---------------+-------------------+---------------------+----------------------+-----------------+
|	Tabu		|			3455	|	       11		  |	   8.42	    		 |		1	       |
|		.		|			.		|	       .		  |	   .	    		 |		.	       |
|		.		|			.		|	       .		  |	   .	    		 |		.	       |
|		.		|			.		|	       .		  |	   .	    		 |		.	       |
+---------------+-------------------+---------------------+----------------------+-----------------+*/
-- Type your code below:

SELECT     n.NAME                                                                                 AS actress_name,
           SUM(r.total_votes)                                                                     AS total_votes,
           COUNT(rm.movie_id)                                                                     AS movie_count,
           ROUND(SUM(r.avg_rating*r.total_votes)/SUM(r.total_votes),2)                            AS actress_avg_rating,
           Rank() OVER(ORDER BY Round(Sum(r.avg_rating*r.total_votes)/Sum(r.total_votes),2) DESC) AS actress_rank
FROM       movie                                                                                  AS m
INNER JOIN ratings                                                                                AS r
ON         m.id=r.movie_id
INNER JOIN role_mapping AS rm
ON         m.id=rm.movie_id
INNER JOIN names AS n
ON         rm.name_id=n.id
WHERE      m.country LIKE "%India%"
AND        rm.category='actress'
AND        m.languages LIKE "%Hindi%"
GROUP BY   NAME
HAVING     COUNT(m.id)>=3 LIMIT 5;

/*
Answer:
actress_name	total_votes	movie_count	actress_avg_rating	actress_rank
Taapsee Pannu	18061	3	7.74	1
Kriti Sanon	21967	3	7.05	2
Divya Dutta	8579	3	6.88	3
Shraddha Kapoor	26779	3	6.63	4
Kriti Kharbanda	2549	3	4.80	5

"Taapsee Pannu" with average rating of 7.74
"Shraddha Kapoor"	with average rating of 6.63
"Kriti Sanon"	with average rating of 7.05
"Kriti Kharbanda"	with average rating of	4.80
"Divya Dutta"	with average rating of 6.88
*/



/* Taapsee Pannu tops with average rating 7.74. 
Now let us divide all the thriller movies in the following categories and find out their numbers.*/


/* Q24. Select thriller movies as per avg rating and classify them in the following category: 

			Rating > 8: Superhit movies
			Rating between 7 and 8: Hit movies
			Rating between 5 and 7: One-time-watch movies
			Rating < 5: Flop movies
--------------------------------------------------------------------------------------------*/
-- Type your code below:

WITH thriller_movies
     AS (SELECT DISTINCT title,
                         avg_rating
         FROM   movie AS m
                INNER JOIN ratings AS r
                        ON r.movie_id = m.id
                INNER JOIN genre AS g using(movie_id)
         WHERE  genre LIKE 'Thriller')
SELECT *,
       CASE
         WHEN avg_rating > 8 THEN 'Superhit movies'
         WHEN avg_rating BETWEEN 7 AND 8 THEN 'Hit movies'
         WHEN avg_rating BETWEEN 5 AND 7 THEN 'One-time-watch movies'
         ELSE 'Flop movies'
       END AS avg_rating_category
FROM   thriller_movies
ORDER  BY avg_rating DESC; 

/*
Answer:
title	avg_rating	avg_rating_category
Safe	9.5	Superhit movies
Digbhayam	9.2	Superhit movies
Dokyala Shot	9.2	Superhit movies
Abstruse	9.0	Superhit movies
Kaithi	8.9	Superhit movies
Raju Gari Gadhi 3	8.8	Superhit movies
Lost Angelas	8.8	Superhit movies
.
.
.
.
.
*/

/* Until now, you have analysed various tables of the data set. 
Now, you will perform some tasks that will give you a broader understanding of the data in this segment.*/

-- Segment 4:

-- Q25. What is the genre-wise running total and moving average of the average movie duration? 
-- (Note: You need to show the output table in the question.) 
/* Output format:
+---------------+-------------------+---------------------+----------------------+
| genre			|	avg_duration	|running_total_duration|moving_avg_duration  |
+---------------+-------------------+---------------------+----------------------+
|	comdy		|			145		|	       106.2	  |	   128.42	    	 |
|		.		|			.		|	       .		  |	   .	    		 |
|		.		|			.		|	       .		  |	   .	    		 |
|		.		|			.		|	       .		  |	   .	    		 |
+---------------+-------------------+---------------------+----------------------+*/
-- Type your code below:

SELECT genre,
       ROUND(AVG(duration), 2)                      AS avg_duration,
       SUM(ROUND(AVG(duration), 2))
         OVER(
           ORDER BY genre ROWS unbounded preceding) AS running_total_duration,
       AVG(ROUND(AVG(duration), 2))
         OVER(
           ORDER BY genre)                          AS moving_avg_duration
FROM   movie AS m
       INNER JOIN genre AS g
               ON m.id = g.movie_id
GROUP  BY genre
ORDER  BY genre; 

/*
genre	avg_duration	running_total_duration	moving_avg_duration
Action	112.88	112.88	112.880000
Adventure	101.87	214.75	107.375000
Comedy	102.62	317.37	105.790000
Crime	107.05	424.42	106.105000
Drama	106.77	531.19	106.238000
Family	100.97	632.16	105.360000
Fantasy	105.14	737.30	105.328571
Horror	92.72	830.02	103.752500
Mystery	101.80	931.82	103.535556
Others	100.16	1031.98	103.198000
Romance	109.53	1141.51	103.773636
Sci-Fi	97.94	1239.45	103.287500
Thriller	101.58	1341.03	103.156154
*/

-- Round is good to have and not a must have; Same thing applies to sorting


-- Let us find top 5 movies of each year with top 3 genres.

-- Q26. Which are the five highest-grossing movies of each year that belong to the top three genres? 
-- (Note: The top 3 genres would have the most number of movies.)

/* Output format:
+---------------+-------------------+---------------------+----------------------+-----------------+
| genre			|	year			|	movie_name		  |worldwide_gross_income|movie_rank	   |
+---------------+-------------------+---------------------+----------------------+-----------------+
|	comedy		|			2017	|	       indian	  |	   $103244842	     |		1	       |
|		.		|			.		|	       .		  |	   .	    		 |		.	       |
|		.		|			.		|	       .		  |	   .	    		 |		.	       |
|		.		|			.		|	       .		  |	   .	    		 |		.	       |
+---------------+-------------------+---------------------+----------------------+-----------------+*/
-- Type your code below:

-- Top 3 Genres based on most number of movies
-- data type of worlwide_gross_income seems not correct, lets investigate
SELECT
	column_name,
	data_type
FROM information_schema.columns
WHERE table_schema = 'imdb'
	AND table_name = 'movie'
	AND column_name = 'worlwide_gross_income';
-- The datatype of worlwide_gross_income "varchar", so we would need to take care of it to be in numeric format 


WITH top3_genre AS
(
         SELECT   genre,
                  COUNT(movie_id) AS movie_count
         FROM     genre
         GROUP BY genre
         ORDER BY movie_count DESC limit 3 ), movie_data AS
(
       SELECT *,
              CASE 
              -- Convert INR currency to USD. 1USD = 81.74 rupees and make datatype as FLOAT
                     WHEN worlwide_gross_income LIKE 'INR%' THEN cast(replace (worlwide_gross_income ,worlwide_gross_income, round((substring_index(worlwide_gross_income, ' ', -1)/81.74))) AS float ) 
                     -- Remove $ string from currency for easy sorting and ordering and make datatype as FLOAT
                     WHEN worlwide_gross_income LIKE '$%' THEN cast(replace (worlwide_gross_income ,worlwide_gross_income, (substring_index(worlwide_gross_income, ' ', -1))) AS float )
              END AS worldwide_gross_income
       FROM   movie ), top5_movie AS
(
           SELECT     genre,
                      year,
                      title AS movie_name,
                      worldwide_gross_income,
                      DENSE_RANK() OVER(partition BY year ORDER BY worldwide_gross_income DESC) AS movie_rank
           FROM       movie_data m
           INNER JOIN genre g
           ON         m.id = g.movie_id
           WHERE      genre IN
                      (
                             SELECT genre
                             FROM   top3_genre) )
SELECT *
FROM   top5_movie
WHERE  movie_rank<=5;

/*Answer:
genre	year	movie_name	worldwide_gross_income	movie_rank
Thriller	2017	The Fate of the Furious	1236010000	1
Comedy	2017	Despicable Me 3	1034800000	2
Comedy	2017	Jumanji: Welcome to the Jungle	962102000	3
Drama	2017	Zhan lang II	870325000	4
Thriller	2017	Zhan lang II	870325000	4
Comedy	2017	Guardians of the Galaxy Vol. 2	863756000	5
Drama	2018	Bohemian Rhapsody	903655000	1
Thriller	2018	Venom	856085000	2
Thriller	2018	Mission: Impossible - Fallout	791115000	3
Comedy	2018	Deadpool 2	785047000	4
Comedy	2018	Ant-Man and the Wasp	622674000	5
Drama	2019	Avengers: Endgame	2797800000	1
Drama	2019	The Lion King	1655160000	2
Comedy	2019	Toy Story 4	1073170000	3
Drama	2019	Joker	995065000	4
Thriller	2019	Joker	995065000	4
Thriller	2019	Ne Zha zhi mo tong jiang shi	700548000	5
*/

-- Finally, let’s find out the names of the top two production houses that have produced the highest number of hits among multilingual movies.
-- Q27.  Which are the top two production houses that have produced the highest number of hits (median rating >= 8) among multilingual movies?
/* Output format:
+-------------------+-------------------+---------------------+
|production_company |movie_count		|		prod_comp_rank|
+-------------------+-------------------+---------------------+
| The Archers		|		830			|		1	  		  |
|	.				|		.			|			.		  |
|	.				|		.			|			.		  |
+-------------------+-------------------+---------------------+*/
-- Type your code below:

WITH production_company_summary AS
(
           SELECT     production_company,
                      COUNT(*) AS movie_count
           FROM       movie    AS m
           INNER JOIN ratings  AS r
           ON         r.movie_id = m.id
           WHERE      median_rating >= 8
           AND        production_company IS NOT NULL
           AND        POSITION(',' IN languages) > 0
           GROUP BY   production_company
           ORDER BY   movie_count DESC)
SELECT   *,
         RANK() OVER( ORDER BY movie_count DESC) AS prod_comp_rank
FROM     production_company_summary LIMIT 2;

/*
Answer:
production_company	movie_count	prod_comp_rank
Star Cinema	7	1
Twentieth Century Fox	4	2

 "Star Cinema" and "Twentieth Century Fox" are the top two production houses for Multilingual movies.
*/



-- Multilingual is the important piece in the above question. It was created using POSITION(',' IN languages)>0 logic
-- If there is a comma, that means the movie is of more than one language


-- Q28. Who are the top 3 actresses based on number of Super Hit movies (average rating >8) in drama genre?
/* Output format:
+---------------+-------------------+---------------------+----------------------+-----------------+
| actress_name	|	total_votes		|	movie_count		  |actress_avg_rating	 |actress_rank	   |
+---------------+-------------------+---------------------+----------------------+-----------------+
|	Laura Dern	|			1016	|	       1		  |	   9.60			     |		1	       |
|		.		|			.		|	       .		  |	   .	    		 |		.	       |
|		.		|			.		|	       .		  |	   .	    		 |		.	       |
+---------------+-------------------+---------------------+----------------------+-----------------+*/
-- Type your code below:


WITH actressess_summary AS
(
           SELECT     NAME                                                  AS actress_name,
                      SUM(total_votes)                                      AS total_votes,
                      COUNT(r.movie_id)                                     AS movie_count,
                      ROUND(SUM(avg_rating*total_votes)/SUM(total_votes),2) AS actress_avg_rating
           FROM       role_mapping                                          AS rm
           INNER JOIN ratings                                               AS r
           ON         rm.movie_id = r.movie_id
           INNER JOIN names AS n
           ON         n.id=rm.name_id
           INNER JOIN genre AS g
           ON         g.movie_id=rm.movie_id
           WHERE      avg_rating > 8
           AND        genre="Drama"
           AND        rm.category="actress"
           GROUP BY   actress_name
           ORDER BY   movie_count DESC)
SELECT   *,
         RANK() OVER(ORDER BY movie_count DESC) AS actress_rank
FROM     actressess_summary LIMIT 3;

/*Answer:
actress_name	total_votes	movie_count	actress_avg_rating	actress_rank
Parvathy Thiruvothu	4974	2	8.25	1
Susan Brown	656	2	8.94	1
Amanda Lawrence	656	2	8.94	1

 "Parvathy Thiruvothu","Susan Brown","Amanda Lawrence" are the top 3 actresses based on number of Super Hit movies for Drama genre.
*/

/* Q29. Get the following details for top 9 directors (based on number of movies)
Director id
Name
Number of movies
Average inter movie duration in days
Average movie ratings
Total votes
Min rating
Max rating
total movie durations

Format:
+---------------+-------------------+---------------------+----------------------+--------------+--------------+------------+------------+----------------+
| director_id	|	director_name	|	number_of_movies  |	avg_inter_movie_days |	avg_rating	| total_votes  | min_rating	| max_rating | total_duration |
+---------------+-------------------+---------------------+----------------------+--------------+--------------+------------+------------+----------------+
|nm1777967		|	A.L. Vijay		|			5		  |	       177			 |	   5.65	    |	1754	   |	3.7		|	6.9		 |		613		  |
|	.			|		.			|			.		  |	       .			 |	   .	    |	.		   |	.		|	.		 |		.		  |
|	.			|		.			|			.		  |	       .			 |	   .	    |	.		   |	.		|	.		 |		.		  |
|	.			|		.			|			.		  |	       .			 |	   .	    |	.		   |	.		|	.		 |		.		  |
|	.			|		.			|			.		  |	       .			 |	   .	    |	.		   |	.		|	.		 |		.		  |
|	.			|		.			|			.		  |	       .			 |	   .	    |	.		   |	.		|	.		 |		.		  |
|	.			|		.			|			.		  |	       .			 |	   .	    |	.		   |	.		|	.		 |		.		  |
|	.			|		.			|			.		  |	       .			 |	   .	    |	.		   |	.		|	.		 |		.		  |
|	.			|		.			|			.		  |	       .			 |	   .	    |	.		   |	.		|	.		 |		.		  |
+---------------+-------------------+---------------------+----------------------+--------------+--------------+------------+------------+----------------+

--------------------------------------------------------------------------------------------*/
-- Type you code below:

WITH next_date_published_summary AS
(
           SELECT     d.name_id,
                      NAME,
                      d.movie_id,
                      duration,
                      r.avg_rating,
                      total_votes,
                      m.date_published,
                      LEAD(date_published,1) OVER(partition BY d.name_id ORDER BY date_published,movie_id ) AS next_date_published
           FROM       director_mapping                                                                      AS d
           INNER JOIN names                                                                                 AS n
           ON         n.id = d.name_id
           INNER JOIN movie AS m
           ON         m.id = d.movie_id
           INNER JOIN ratings AS r
           ON         r.movie_id = m.id ), top_director_summary AS
(
       SELECT *,
              DATEDIFF(next_date_published, date_published) AS date_difference
       FROM   next_date_published_summary )
SELECT   name_id                       AS director_id,
         NAME                          AS director_name,
         COUNT(movie_id)               AS number_of_movies,
         ROUND(Avg(date_difference),2) AS avg_inter_movie_days,
         ROUND(Avg(avg_rating),2)      AS avg_rating,
         SUM(total_votes)              AS total_votes,
         MIN(avg_rating)               AS min_rating,
         MAX(avg_rating)               AS max_rating,
         SUM(duration)                 AS total_duration
FROM     top_director_summary
GROUP BY director_id
ORDER BY COUNT(movie_id) DESC LIMIT 9;

/*Answer:
director_id	director_name	number_of_movies	avg_inter_movie_days	avg_rating	total_votes	min_rating	max_rating	total_duration
nm2096009	Andrew Jones	5	190.75	3.02	1989	2.7	3.2	432
nm1777967	A.L. Vijay	5	176.75	5.42	1754	3.7	6.9	613
nm0814469	Sion Sono	4	331.00	6.03	2972	5.4	6.4	502
nm0831321	Chris Stokes	4	198.33	4.33	3664	4.0	4.6	352
nm0515005	Sam Liu	4	260.33	6.23	28557	5.8	6.7	312
nm0001752	Steven Soderbergh	4	254.33	6.48	171684	6.2	7.0	401
nm0425364	Jesse V. Johnson	4	299.00	5.45	14778	4.2	6.5	383
nm2691863	Justin Price	4	315.00	4.50	5343	3.0	5.8	346
nm6356309	Özgür Bakar	4	112.00	3.75	1092	3.1	4.9	374
*/
